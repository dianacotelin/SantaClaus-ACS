~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
321CD - Cotelin Maria-Diana

~~~~~~~~  Proiect - Etapa 2 - Santa Claus is coming to ACS students  ~~~~~~~~

    Design pattern-uri folosite: Singleton (Database), Factory, Strategy
    (child si strategy), Builder (data.Children).
    In mare parte nu a trebuit sa fac modificari claselor de la etapa 1.
    Singura schimbare a fost la Children unde am adaugat builder si la
    Database pe care am transformat-o in Singleton si am facut apoi
    alta clasa pentru runde. Am mai adaugat strategia pentru cadouri
    si campurile noi.

    main -> Se creeaza calea de input si output si se apeleaza action pentru
            fiecare fisier.

            -> action: Am creat un input si am retinut datele de acolo, iar
             apoi am facut un Database cu datele. Pentru fiecare an am
             apelat metoda pentru runde (respectiv RoundZero) din Rounds.
             Am luat lista initiala de copii, iar apoi roundZero mi-a facut
             lista actualizata, careia i-am facut deep-copy pentru a o pune
             in finalChildren (lista de copii pentru fiecare runda), iar apoi
             apoi in Result (lista de fiecare runda).
             La urmatoarea runda, se da ca parametru numarul rundei si lista
             annualChildren pe care o reactualizeaza si careia ii face iar
             deep-copy pentru a o pune in output.
             Am folosit objectMapper pentru a scrie rezultatul in output,
             deoarece n-am reusit cu JSONObject.

    child -> Am folosit Strategy si Factory pentru a determina scorul fiecarui
            copil.
            -> StrategyFactory - construieste instante de subclase ale
               NiceScoreStrategy.
               Contine o metoda createStrategy care primeste ca parametrii
               varsta si lista de scoruri pentru un copil si apoi in functie
               de varsta creeaza strategia pentru niceScore
            -> Baby, Kid si Teen, implementeaza interfata NiceScoreStrategy,
            contine o metoda getNiceScore care calculeaza scorul pentru fiecare
            categorie de varsta asa cum era precizat in cerinta.

    strategy -> Am folosit Strategy si Factory pentru a crea un HashMap cu
               copiii sortati in functie de strategie.
              -> GiftFactory - construieste instante de subclase ale
                 interfetei Strategy
                 Contine metoda createStrategy care primeste un string si o
                 lista de copii si returneaza un HashMap.
              -> IdStrategy, NiceScoreStrategy, NiceScoreCityStrategy, imple-
              menteaza interfata Strategy.
              Functioneaza cam la fel, fiecare creeaza un HashMap cu informatii
              si apoi il sorteaza in functie de valori cu un LinkedList
              -> IdStrategy - HashMap de Id ca string si apoi ca double
              -> NiceScore - HashMap cu Id-uri ca string si NiceScore
              -> NiceScoreCityStrategy - HashMap cu orase si NiceScore

    data -> contine clasele pentru Input:
            -> InputLoader - asemanatoare cu clasa InputLoader de la tema
            anterioara, am folosit JSONObject pentru fiecare element din
            input, tot aici am folosit si clasa Utils care contine metode
            de convertire dintr-un array de JSON in array de strings.
            (foloseste deep-copy pentru Children, Gift si ChildUpdate).
            * nu am folosit enumurile pentru oras si categorii, le-am
            transformat in siruri de caractere, deoarece am avut probleme cu
            JSONObject.

            -> Input - clasa de Inputuri care contine datele numberOfYears,
            santaBudget etc.

            -> Gift - clasa pentru cadouri

            -> Children - clasa pentru copil, am folosit Builder pentru
            bonusNiceScore

            -> ChildUpdate - clasa asemanatoare cu Children, care are doar
            campurile care se modifica

            -> AnnualChanges - se retin schimbarile anuale

            -> AnnualChildren, Result -> Clase folosite pentru output.
            AnnualChildren este o lista de copii (pentru fiecare runda),
            Result este o lista de AnnualChildren (de runde).

            -> Database - baza de data cu toate datele

            -> Rounds - are doar 2 metode pentru runde, una pentru runda
             0 si una pentru celelalte si o metoda care pune cadouri.
                -> roundZero - am adaugat in istoricul fiecarui copil scorul
                curent, iar apoi am folosit strategyFactory pentru a-i asigna
                scorul. Am memorat fiecare valoare de scor pentru a calcula
                budgetUnit ulterior.
                Am verificat daca copilul are elf roz sau negru si in functie
                de asta i-am scazut/crescut bugetul alocat.
                In functie de buget si preferinte, am adaugat cadoul. Am cautat
                apoi cadoul in lista de cadouri si i-am scazut cantitatea
                Am verificat daca copilul nu a primit niciun cadou, si daca are
                elf galben, daca da, am incercat sa gasesc cadoul cel mai ieftin
                din prima categorie de preferinte.

                -> rounds - Intai verific daca copiii au trecut la Young-Adult,
                folosesc o lista auxiliara pentru acest lucru.
                Verific apoi schimbarile anuale si actualizez datele, intai
                bugetul, apoi adaug copiii noi si cadourile.
                Parcurg lista de schimbari anuale si verific pentru ce copil
                sunt schimbarile. Actualizez istoricul de scoruri, lista de
                preferinte si elful.
                Parcurg toti copiii si setez scorul de cumintenie, verific
                si daca are scor bonus.
                Creez o strategie pentru cadouri care imi returneaza un HashMap
                cu valori care depind de strategia din input. (mentionat mai sus
                la strategy).
                In functie de strategie, parcurg HashMap-ul. Daca este
                niceScoreCity caut copilul din orasul de pe prima pozitie.
                Altfel, daca este id sau niceScore la strategie, caut copilul cu
                id-ul de pe prima pozitie, apoi de pe a 2-a si tot asa.
                Apelez assignGift la toate.

            -> assignGift
                Calculez budgetUnit si setez bugetul pentru fiecare copil.
                Verific elful ca sa vad daca cresc/scad bugetul.
                Adaug cadourile in functie de lista de preferinte si buget.
                Scad cantitatea cadoului adaugat.
                Verific daca copilul are elf galben si daca nu a primit niciun
                cadou, in acest caz ii caut cadoul cel mai ieftin din prima
                categorie din lista de preferinte.

    common-> Am adaugat constante folosite atat pentru citirea inputului cat si
           pentru varste si teste.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

